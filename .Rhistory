#===============================================================
#data wrangling
# replace MonthlyIncome NA's to mean
training[is.na(training[,7]),7] <- mean(training[,7],na.rm=TRUE)
training <- read.csv("/Users/herrickmak/Documents/Paidy_interview/cs-training.csv")
git push
training <- read.csv("/Users/herrickmak/Documents/Paidy_interview/GiveMeSomeCredit/cs-training.csv")
test <- read.csv("/Users/herrickmak/Documents/Paidy_interview/GiveMeSomeCredit/cs-test.csv")
library(tidyverse)
library(gplots)
library(caTools)
# summary
summary(training)
#===============================================================
#data wrangling
# replace MonthlyIncome NA's to mean
training[is.na(training[,7]),7] <- mean(training[,7],na.rm=TRUE)
# replace NumberOfDependents NA's to mode
a <- table(training$NumberOfDependents)
training[is.na(training[,12]),12] <- which.max(a)
# replace MonthlyIncome NA's to mean
test[is.na(test[,7]),7] <- mean(test[,7],na.rm=TRUE)
# replace NumberOfDependents NA's to mode
b <- table(test$NumberOfDependents)
test[is.na(test[,12]),12] <- which.max(b)
# remove first column as it is not useful for test
training = training[2:12]
test = test[2:12]
#===============================================================
#heatmap
install.packages("corrplot")
library(corrplot)
# cast SeriousDlqin2yrs into categorical factor
training$SeriousDlqin2yrs <- factor(training$SeriousDlqin2yrs, levels=c(0,1))
# split the dataset to training and test
set.seed(123)
split <- sample.split(training$SeriousDlqin2yrs, SplitRatio = 0.8)
training_set <- subset(training, split == TRUE)
test_set <- subset(training, split == FALSE)
# Feature scaling to z
training_set[c(-1)] = scale(training_set[c(-1)])
test_set[c(-1)] = scale(test_set[c(-1)])
#==========================================================
# Fitting SVM to the Training set
install.packages('e1071')
# vector
y_pred_test <- predict(classifier, newdata=test[-1])
# replace NA with result
test$SeriousDlqin2yrs <- y_pred_test
#==========================================================
# Naive Bayes
nb <- naiveBayes(training_set$SeriousDlqin2yrs~.,
data = training_set[,-1])
library(e1071)
#==========================================================
# Naive Bayes
nb <- naiveBayes(training_set$SeriousDlqin2yrs~.,
data = training_set[,-1])
nb_predict <- predict(nb, test, type="raw")
nb_predict_plot <- as.data.frame(nb_predict)
# stack the dataset
stacked_nb_predict <- stack(nb_predict_plot)
# plot
stacked_nb_predict %>% filter(ind==1) %>%
ggplot(aes(x=values)) + geom_histogram(bins = 50)
rf <- randomForest(training_set$SeriousDlqin2yrs~.,
data = training_set[,-1])
#==========================================================
#Random Forest
library(randomForest)
rf <- randomForest(training_set$SeriousDlqin2yrs~.,
data = training_set[,-1])
# plot
stacked_nf_predict %>% filter(ind==1) %>%
ggplot(aes(x=values)) + geom_histogram(bins = 50)
# plot
stacked_rf_predict %>% filter(ind==1) %>%
ggplot(aes(x=values)) + geom_histogram(bins = 50)
# stack the dataset
stacked_rf_predict <- stack(rf_predict_plot)
rf_predict_plot <- as.data.frame(rf_predict)
rf_predict <- predict(rf, test, type="prob")
rf_predict_plot <- as.data.frame(rf_predict)
# stack the dataset
stacked_rf_predict <- stack(rf_predict_plot)
# plot
stacked_rf_predict %>% filter(ind==1) %>%
ggplot(aes(x=values)) + geom_histogram(bins = 50) + ggtitle("Random Forest")
# plot
stacked_rf_predict %>% filter(ind==1) %>%
ggplot(aes(x=values)) + geom_histogram(bins = 50) + ggtitle("Random Forest") + theme(plot.title=element_text(hjust=0.5))
# plot
stacked_rf_predict %>% filter(ind==1) %>%
ggplot(aes(x=values)) + geom_histogram(bins = 50) + ggtitle("Random Forest") +
theme(plot.title=element_text(hjust=0.5))
#age distribution
ggplot(data=cs-training,aes(x=age))+geom_bar()+
ggtitle("Age distribution")+theme(plot.title=element_text(hjust=0.5))
git push
